23-11-2023

DOCKER::

>> Containers:
      
      --- contains everything needed for app to run 
      --- comes up with own set of libraries
      --- come with source code,plugins,.....etc
      --- need not to do any configuration
      --- consume less memory space
      --- light weight & portable soln for packaging,distributing & running software app.
      --- works on any platform & it is on th top of all OS
      --- virtual machine -- guest user machine
      --- Isolated containers -- seperate containers
      --- Portability -- run consistently on any system 
      --- Effeciency -- share the host operating system's kernel make them light weight
      --- Docker -- popular platform to build,share & run containers
      --- Orchestration -- scanning-up
			-- tools like Kubernetes-helps to manage deploymnt,scaling,& operation of contanerized app
			-- Kubernetes -- a cluster -- have a grp of servers -- knew which server is idle, busy, replacing new 			   containers instead of failed containers.
			-- Docker - not an orchestrate tool
      --- Microservices --- app broken into small ,independent services, each service run its own containers. 


>> recommend to use in Linux platform
>> independent of OS
>> open source platform(community support available) for developers & admins to build,ship & run contanerized app.
>> enable developers to package, distribute & run app in isolated env called containers
>> provides tools & run time env to create deploy and manage these containers
>> WHY DOCKER :: 
    --- if there more traffic in app, requirement of server increases in that case docker used.
>> Docker Image :: blue print of what we need inside the container
	-- we can convert container into image  and upload it into a "DockerHub".
>> Docker File -- a text file -- we write what we need in a docker
>> Docker Trusted Registry(DTR) --- imags in private


>> docker file is a script to create docker image.
>> attributes are in UPPERCASE only
>> every instructions is a set of layers
>> many layers will combine to form single image
>>CMD can overridden in run time where ENTRYPOINT can't be overridden
--------------------------------------------------------------------------------------------------------------------------
docker images  ---- to view the images if there is any existing
docker pull imagename:version(tag) ---to pull images
docker run -itd --name containername imagename:version(tag) -----to work with created container
docker ps ---shows all active container
docker a ----shows all container
docker run -itd --name containername -p 8080:80 imagename----setting port to container

>>can't use one port number to multiple container.
---------------------------------------------------------------------------------------------------------------------------
>> itd -- interactive detached container
---------------------------------------------------------------------------------------------------------------------------

AWS CLOUD:::
----------
----------

Steps::
-----------
>> launching the VM on AWS
>> connect to the instance
>> install docker on instance
>> pull nginx images
>> create nginx containers /// another container from internet
>> docker file -- create images & create container

------------------
>> based on config we choose VM
>> >> ec2 -- elastic computing cloud
>> ec2-- provided by amazon for free for 720hrs
>> web key -- 
>> for linux port 22 is standard port(SSH traffic)
>> ip address,username,pemkey needed to access/////outside the cloud we need pempkey otherwise no need
>> default username -- ec2-user
>> 

>>putty --- 
   sudo su -   -->> to switch with root user
   yum install -y docker ---> to install docker
   systemctl start docker --> to start docker
   systemctl enable docker --> to enable the service
   systemctl status docker --> to check the status whether active/inactive

  to create docker file in putty::
	mkdir foldername -->create folder
	ls ---> list the created folder
	cd foldername
	pwd
	vi app.py --->to write program in python
	Esc i --> button click to go into app.py
	esc shift : wq --> to save the file

>> WORKDIR /foldername -- this will create folder and change the path to that folder.
-----------
vi Dockerfile

FROM python:3.9
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
EXPOSE 5000
CMD "python", "app.py"

---------
vi requirements.txt

docker build -t myapp:v1.0 .


Flask==2.0.1
Flask-SQLALchemy==2.5.1
------------------------------------------------










